local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Aethrix",
    LoadingTitle = "[üåàPENTA]Shrimp game",
    LoadingSubtitle = "by imrane_8",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
    Discord = {
       Enabled = false,
       Invite = "xA6GXgthaE", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Key",
       Subtitle = "Key System",
       Note = "Join my discord discord.gg/j2uuwySkSZ",
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Idonthinkhamide"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

 local Slider = PlayerTab:CreateSlider({
    Name = "Jump Height",
    Range = {10, 500},
    Increment = 1,
    Suffix = "Height",
    CurrentValue = 10,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
     game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
    game.Players.LocalPlayer.Character.Humanoid.UseJumpPower = Value
   end,
 })

local Slider = PlayerTab:CreateSlider({
    Name = "Health",  -- Nom du slider (affich√© dans l'UI)
    Range = {1, 100},  -- Plage de la sant√© (entre 1 et 100)
    Increment = 1,  -- Incr√©ment de la valeur du slider (par pas de 1)
    Suffix = "Health",  -- Suffixe affich√© apr√®s la valeur du slider
    CurrentValue = 10,  -- Valeur initiale (par exemple, 10)
    Flag = "Slider1",  -- Identifiant unique pour la configuration (utile si tu sauvegardes les param√®tres)
    Callback = function(Value)
        -- Acc√©der √† la sant√© et aux propri√©t√©s de sant√© du joueur
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Assurer que le personnage a un objet Humanoid (qui g√®re la sant√©)
        local humanoid = character:WaitForChild("Humanoid")

        -- Modifier la sant√© et la sant√© maximale en fonction de la valeur du slider
        humanoid.Health = Value
        humanoid.MaxHealth = Value
    end,
})


 local Slider = PlayerTab:CreateSlider({
    Name = "Character Size",
    Range = {1, 10},  -- Valeurs de taille entre 1 et 10
    Increment = 0.1,  -- Incr√©ment de la taille
    Suffix = "Size",  -- Texte ajout√© √† la valeur, ici "Size"
    CurrentValue = 1,  -- Valeur initiale du curseur (taille initiale)
    Flag = "SizeSlider",  -- Identifiant unique pour la configuration
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Fonction pour changer la taille du personnage
        local function resizeCharacter(sizeFactor)
            -- Boucler √† travers toutes les parties du personnage
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    -- Modifier la taille de chaque partie par le facteur de taille
                    part.Size = part.Size * sizeFactor
                end
            end

            -- Modifier les propri√©t√©s du Humanoid pour ajuster la taille globale du personnage
            local humanoid = character:WaitForChild("Humanoid")
            humanoid.HipWidth = humanoid.HipWidth * sizeFactor
            humanoid.HipHeight = humanoid.HipHeight * sizeFactor
            humanoid.BodyTypeScale = humanoid.BodyTypeScale * sizeFactor
            humanoid.HeadScale = humanoid.HeadScale * sizeFactor
            humanoid.ProportionScale = humanoid.ProportionScale * sizeFactor
        end

        -- Appliquer la nouvelle taille √† partir de la valeur du curseur
        resizeCharacter(Value)
    end,
})


local Tab = Window:CreateTab("Games", 4483362458) -- Title, Image

local Button = Tab:CreateButton({
   Name = "Auto win Green light Red light",
   Callback = function()
local teleportPosition = Vector3.new(125.5, 3.5, 723.4) -- Remplacez par vos coordonn√©es cibles.

local function teleportToPosition()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- T√©l√©porte le joueur
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition)
    else
        print("Impossible de t√©l√©porter le joueur.")
    end
end

teleportToPosition()

   end,
})

local ToolTab = Window:CreateTab("Tools", 4483362458) -- Title, Image

local Dropdown = ToolTab:CreateDropdown({
   Name = "Punch",
   Options = {"Punch"},
   CurrentOption = {"Punch"},
   MultipleOptions = true,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   game.ReplicatedStorage.Assets.Tools.Punch.Parent = game.Players.LocalPlayer.Backpack
   end,
})

local Dropdown = ToolTab:CreateDropdown({
   Name = "Shank",
   Options = {"Shank"},
   CurrentOption = {"Shank"},
   MultipleOptions = true,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   game.ReplicatedStorage.Assets.Tools.Shank.Parent = game.Players.LocalPlayer.Backpack
   end,
})

local TeleportTab = Window:CreateTab("Teleport", 4483362458) -- Title, Image

local Button = TeleportTab:CreateButton({
   Name = "Teleport HoneyComb",
   Callback = function()
   local teleportPosition = Vector3.new(-427.710693359375, 4.65000057220459, 89.43641662597656) -- Remplacez par vos coordonn√©es cibles.


local function teleportToPosition()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- T√©l√©porte le joueur
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition)
    else
        print("Impossible de t√©l√©porter le joueur.")
    end
end

teleportToPosition()
   end,
})

local Button = TeleportTab:CreateButton({
   Name = "Teleport Penthlaton",
   Callback = function()
   local teleportPosition = Vector3.new(-82.5, 35.5, -580.200012, 1, 0, 0, 0, 1, 0, 0, 0, 1) -- tp Glasses


local function teleportToPosition()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- T√©l√©porte le joueur
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition)
    else
        print("Impossible de t√©l√©porter le joueur.")
    end
end

teleportToPosition()
   end,
})

local Button = TeleportTab:CreateButton({
   Name = "Teleport Lobby ",
   Callback = function()
   local teleportPosition = Vector3.new(-83.1579514, 2.4060688, -62.6308746, 1, 0, 0, 0, 1, 0, 0, 0, 1) -- tp Glasses


local function teleportToPosition()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- T√©l√©porte le joueur
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition)
    else
        print("Impossible de t√©l√©porter le joueur.")
    end
end

teleportToPosition()
   end,
})
